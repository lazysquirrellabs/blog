_id: 8ce44920-67a5-11ee-a8cd-85cefddba29a
_parent: '/posts/coroutines_async_await'
replying_to: 105cc8e0-640e-11ee-a8cd-85cefddba29a
message: >-
  Hi Haerion,


  First of all, thank you for your comment. I'm glad you enjoyed the post.


  You're right, I left ValueTask out and in retrospect maybe I should have
  briefly mentioned it.


  And indeed, there are some scenarios in which a Task will not allocate on the
  heap. For example, if a method returns a Task but completes synchronously. It
  might also be the case for some tasks with a return value that is easily
  enumerable (e.g., Task&lt;bool&gt;). [Source](https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask).


  ValueTask (or ValueTask&lt;T&gt;) might be handy in methods that return Task (or
  Task&lt;T&gt;) and may complete synchronously. In those cases, it will might save
  the heap allocation. But given the runtime caching of some Task instances
  (explained on the link in the paragraph above), it might not be advantageous
  as well. That's particularly true for the non-generic Task (due to
  `Task.CompletedTask`).


  If the method that returns a ValueTask completed asynchronously, the heap
  allocation will happen regardless because the ValueTask will just wrap the
  Task instance (which was allocated on the heap) in its struct. In this
  scenario, ValueTask actually introduces a performance overhead when compared
  to just Task.


  So in retrospect, ValueTask:

  - Might save heap allocation if the method completes synchronously and the
  Task instance that holds the completion value hasn't been cached.

  - Does not save heap allocation if the method completes asynchronously, and
  introduces an overhead.


  Given the asynchronous nature of video games (discussed in its own post
  session), I could argue that most asynchronous methods in a game project would
  finish asynchronously. Thus, ValueTask's relevance in video game projects is
  dwarfed when compared to—for example—an ASP.NET Core application.


  UniTask, in the other hand, does not allocate on the heap regardless of
  whether the method completed synchronously or asynchronously.


  With that said, I still think that a quick reference to ValueTask would be
  valuable to the blog post, and I will add it soon.


  Once again, thank you for your contribution!


  PS: I did not know Microsoft's recommendation for operations that exceed 30ms
  execution time. I believe that value should be even lower for most video
  games.
name: Matheus Amazonas
email: matheus.amazonas@gmail.com
hp: ''
date: '2023-10-10T19:45:23.002Z'
