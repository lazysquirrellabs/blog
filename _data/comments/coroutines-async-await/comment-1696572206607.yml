_id: 105cc8e0-640e-11ee-a8cd-85cefddba29a
_parent: 'https://matheusamazonas.net/blog/2023/09/29/coroutines-async-await/'
replying_to: ''
message: >-
  Hey there,

  good read, thank you.


  I wanted to add, that the Task library also offers ValueTask, which is a
  struct, so the "Task consumes always heap" argument is not entirely true.


  I have seen many statements of developers in forums who prefer coroutines over
  everything else, but it can clearly be seen, that they don't have any
  experience with the TPL or simply never have been on the application side of
  programming, where almost every interface now offers a full async support and
  the number of interactions with third party apis is almost async at every
  time.

  Microsoft recommends that every operation, that will probably exceed 30ms
  runtime, should be covered in an async method, and considering this, it
  becomes clear, that almost everything aside of increasing some values or doing
  some basic stuff, will be async.


  Even LINQ has full async support, even for deferred execution scenarios, where
  you don't fire up a .ToList() at the end of the statement.


  New for me was the UniTask library. I will take a closer look at this one now.

  Again, thanks for this article!
name: Haerion
email: mike.spambox@outlook.com
hp: ''
date: '2023-10-06T06:03:26.605Z'
